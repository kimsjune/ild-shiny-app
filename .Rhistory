shiny::runApp()
runApp()
spe_ruv
spe_ruv <- readRDS("data/spe_ruv.rds")
annotation_condition <- c("fibroblast_IPF","fibrosis_IPF","uninvolved_IPF",
"inflammatory_NSIP","central_NSIP","peripheral_NSIP")
library(shiny)
library(standR)
library(ggplot2)
spe_ruv
spe_ruv %>%
filter(anno_type)
library(tidyverse)
spe_ruv %>%
filter(anno_type)
spe_ruv[,]
spe_ruv[,spe_ruv$anno_type]
spe_ruv %>%
filter(,anno_type=="fibroblast_IPF")
str(spe_ruv)
spe_ruv[,spe_ruv$anno_type == c("fibroblast_IPF","fibrosis_IPF")]
data.frame(spe_ruv) %>%
filter(., anno_type=="fibroblast_IPF")
spe_ruv[,spe_ruv$anno_type == "fibroblast_IPF"]
runApp()
spe_ruv[1,1,]
spe_ruv[1,1]
spe_ruv[2,2,]
spe_ruv[2,2]
runApp()
colnames(spe_ruv)
spe_ruv
colData(spe_ruv)
runApp()
test <- c("fibroblast_IPF","fibrosis_IPF")
spe_ruv[,spe_ruv$anno_type == test]
spe_ruv[,spe_ruv$anno_type == "fibrosis_IPF"]
spe_ruv[,spe_ruv$anno_type == "fibroblast_IPF"]
spe_ruv[,spe_ruv$anno_type == grepl("fibroblast_IPF|fibrosis_IPF "]
spe_ruv[,spe_ruv$anno_type == grepl("fibroblast_IPF|fibrosis_IPF")]
spe_ruv[,spe_ruv$anno_type == grepl("fibroblast_IPF|fibrosis_IPF", spe_ruv$anno_type)]
spe_ruv[,spe_ruv$anno_type == grep("fibroblast_IPF|fibrosis_IPF", spe_ruv$anno_type)]
spe_ruv[,spe_ruv$anno_type == grepl("fibroblast_IPF|fibrosis_IPF", spe_ruv$anno_type)]
?grepl
spe_ruv[,spe_ruv$anno_type == grepl("fibroblast_IPF|fibrosis_IPF", spe_ruv$anno_type)]
spe_ruv[,spe_ruv$anno_type == grepl("fibroblast_IPF", spe_ruv$anno_type)]
spe_ruv[,spe_ruv$anno_type == "fibroblast_IPF"]
spe_ruv$anno_type
grepl("fibroblast_IPF|fibrosis_IPF", spe_ruv$anno_type)
spe_ruv[,spe_ruv$anno_type == grepl("fibroblast_IPF", spe_ruv$anno_type)]
spe_ruv[,spe_ruv$anno_type = grepl("fibroblast_IPF", spe_ruv$anno_type)]
spe_ruv[,spe_ruv$anno_type == grepl("fibroblast_IPF", spe_ruv$anno_type)]
colnames(spe_ruv)
colData(spe_ruv)
dim(colData(spe_ruv))
dim(spe_ruv)
spe_ruv[,colData(spe_ruv$anno_type == grepl("fibroblast_IPF", spe_ruv$anno_type))]
dim(spe_ruv)
colnames(spe_ruv)
spe_ruv$anno_type == grepl("fibroblast_IPF", spe_ruv$anno_type)
grepl("fibroblast_IPF", spe_ruv$anno_type)
spe_ruv[,grepl("fibroblast_IPF", spe_ruv$anno_type))]
spe_ruv[,grepl("fibroblast_IPF", spe_ruv$anno_type)]
spe_ruv[,grepl("fibroblast_IPF|fibrosis_IPF", spe_ruv$anno_type)]
spe_ruv[,grepl(test, spe_ruv$anno_type)]
spe_ruv[,grepl("fibroblast_IPF|fibrosis_IPF", spe_ruv$anno_type)]
spe_ruv$sample_id
spe_ruv$ScanLabel
spe_ruv$SegmentLabel
spe_ruv$ROILabel
spe_ruv$sample_id <- paste0(spe_ruv$ScanLabel, spe_ruv$ROILabel)
paste0(spe_ruv$ScanLabel, spe_ruv$ROILabel)
spe_ruv[,grepl("fibroblast_IPF|fibrosis_IPF|", spe_ruv$anno_type)]
runApp()
shapes[1] <- 1
shapes[2]  <-2
shapes
str(shapes)
runApp()
test <- 1:5
test
str(test)
runApp()
?as.integer
runApp()
test <- list("pink", "black")
test
unlist(test)
str(unlist(test))
c(unlist(test))
paste(unlist(test), sep=",", collapse = )
paste(unlist(test), sep=",", collapse = NULL)
paste(unlist(test), sep=",", collapse = " ")
as.character(unlist(test))
test2 <- c("pink", "black")
str(test2)
test2
runApp()
colours)_
colours()
runApp()
runApp(., display.mode = "showcase")
runApp(app.R, display.mode = "showcase")
runApp(./app.R, display.mode = "showcase")
getwd()
runApp( display.mode = "showcase")
?selectInput
runApp()
runApp( display.mode = "showcase")
library(shiny)
runApp( display.mode = "showcase")
runApp()
?observeEvent
runApp()
runApp(display.mode = "showcase")
runApp()
?reactive
?observeEvent
runApp()
runApp(display.mode = "showcase")
runApp()
spe_ruv$anno_type
unique(spe_ruv$anno_type)
runApp()
?withProgress
BiocManager::install("shinyjs")
runApp()
?toggle
runApp()
BiocManager::install("shinydashboardplus")
BiocManager::install("shinydashboardPlus")
library(shinydashboardPlus)
shinydashboardPlusGallery()
library(shinydashboardPlus)
shinydashboardPlusGallery()
BiocManager::install(c("styler","shinyAce", "shinyWidgets", "shinyjqui"))
library(shinydashboardPlus)
shinydashboardPlusGallery()
BiocManager::install("shinyEffects")
library(shinydashboardPlus)
shinydashboardPlusGallery()
if (FALSE) { # rlang::is_interactive()
items <- lapply(LETTERS, function(x) {
accordion_panel(paste("Section", x), paste("Some narrative for section", x))
})
# First shown by default
accordion(!!!items)
# Nothing shown by default
accordion(!!!items, open = FALSE)
# Everything shown by default
accordion(!!!items, open = TRUE)
# Show particular sections
accordion(!!!items, open = "Section B")
accordion(!!!items, open = c("Section A", "Section B"))
# Provide an id to create a shiny input binding
library(shiny)
ui <- page_fluid(
accordion(!!!items, id = "acc")
)
server <- function(input, output) {
observe(print(input$acc))
}
shinyApp(ui, server)
}
runApp()
bs_theme_preview()
BiocManager::install("bsicons")
bs_theme_preview()
runApp()
bs_theme_preview()
runApp()
?wellPanel
runApp()
?uiOutput
runApp()
?wellPanel
runApp()
shinylive::export("app", "site")
shinylive::export(., "site")
shinylive::export("../shiny", "site")
httpuv::runStaticServer("site")
install.packages('rsconnect')
rsconnect::setAccountInfo(name='llgb91-kimsjune',
token='2093843606A9F1CD78AB8AA225F29A23',
secret='0E3d0UAtD0CjR2yDafsD5J4Q3EDaLjAg2CvQpu+0')
rsconnet::deployApp("./")
rsconnect::deployApp("./")
shinylive::export("../shiny", "site")
httpuv::runStaticServer("site")
rsconnect::deployApp("./")
install.packages("pak")
pak::pak("posit-dev/r-shinylive")
library(shiny)
shinylive::export("../shiny", "site")
httpuv::runStaticServer("site/")
shinylive::export("../shiny", "site")
httpuv::runStaticServer("site/")
rsconnect::deployApp("./")
BiocManager::install("quarto")
rsconnect::deployApp("./")
sessionInfo()
shiny::runApp()
runApp()
shiny::runApp()
BiocManager::install("shinycssloaders")
runApp()
lcpm_subset_scale_topGenes
runApp()
1:3
runApp()
volcanoTable <- list
volcanoTable <- topTable(efit, coef=1, n=Inf)
runApp()
shiny::runApp()
runApp()
annotation_condition_list
# A named list organizes annotations by name (condition)
annotation_condition_list <- list(
IPF = c("fibroblast_IPF", "fibrosis_IPF", "neutral_IPF", "lymphoid_IPF"),
NSIP = c("central_NSIP", "inflammatory_NSIP", "peripheral_NSIP", "airway_NSIP"),
CHP = c("granuloma_CHP", "inflammatory_CHP", "fibrosis_CHP", "neutral_CHP"),
UNC = c("fibroblast_UNC", "lymphoid_UNC", "fibrosis_UNC", "neutral_UNC"),
Normal = c("peripheral_NOR", "central_NOR", "airway_NOR", "pleura_NOR")
)
runApp()
ncol()
runApp()
shiny::runApp()
runApp()
a <- c("hello")
sub(a)
runApp()
?nav_panel
runApp()
?plot_grid
runApp()
bs_theme_preview()
bs_theme_preview(showcase_top_right())
bs_theme_preview()
runApp()
?numericInput
runApp()
?fluidRow
runApp()
?withSpinner
runApp()
shiny::runApp()
runApp()
?HTML
runApp()
BiocManager::install("MathJax")
install.packages("MathJax")
install.packages("mathjaxr")
library(mathjaxr)
runApp()
?shiny::icon
runApp()
?topTable
runApp()
?checkboxGroupInput
runApp()
?radioButtons
runApp()
?renderPlot
runApp()
?renderPlot
runApp()
library(renv)
renv::init()
git status
shiny::runApp()
library(statmod)
library(DT)
BiocManger::install("statmod")
BiocManager::install("statmod")
library(DT)
shiny::runApp()
runApp()
dim(spe_ruv)
runApp()
<<<<<<< HEAD
=======
BiocManager::install("shinymanager")
library(shinymanager)
shiny::runApp()
runApp()
renv::init()
renv::restore()
invisible(lapply(paste0('package:', names(sessionInfo()$otherPkgs)), detach, character.only=TRUE, unload=TRUE))
lapply(paste('package:',names(sessionInfo()$otherPkgs),sep=""),detach,character.only=TRUE,unload=TRUE)
shiny::runApp()
deactivate(project = NULL)
shiny::runApp()
runApp()
shiny::runApp()
library(rsconnect)
rsconnect::setAccountInfo(rsconnect::setAccountInfo(name='llgb91-kimsjune',
token='2093843606A9F1CD78AB8AA225F29A23',
secret='0E3d0UAtD0CjR2yDafsD5J4Q3EDaLjAg2CvQpu+0'))
rsconnect::setAccountInfo(name='llgb91-kimsjune',
token='2093843606A9F1CD78AB8AA225F29A23',
secret='0E3d0UAtD0CjR2yDafsD5J4Q3EDaLjAg2CvQpu+0')
rsconnect::setAccountInfo(name='llgb91-kimsjune',
token='2093843606A9F1CD78AB8AA225F29A23',
secret='0E3d0UAtD0CjR2yDafsD5J4Q3EDaLjAg2CvQpu+0')
setRepositories()
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.19")
library(shiny)
BiocManager::install
BiocManager::install(c("shiny","shinymanager","dplyr","shinyjs","bslib","shinylive","shinycssloaders","DT","mathjaxr","colorspace","standR","ggplot2","gridExtra","cowplot","ggrepel","ggpp","ggh4x","limma","statmod","ComplexHeatmap","circlize"))
library(shiny)
library(shinymanager)
library(dplyr)
library(shinyjs)
library(bslib)
library(shinylive)
library(shinycssloaders)
library(DT)
library(mathjaxr)
library(colorspace)
library(standR)
library(ggplot2)
library(gridExtra)
library(cowplot)
library(ggrepel)
library(ggpp)
library(ggh4x)
library(limma)
library(statmod)
library(ComplexHeatmap)
library(circlize)
library(tidyverse)
BiocManager::install(c("tidyverse","tibble"))
install.packages("C:/Users/jk/Downloads/matrixStats_1.0.0.tar.gz", repos = NULL, type = "source")
library(matrixStats)
detach("package:matrixStats", unload = TRUE)
detach("package:ComplexHeatmap", unload = TRUE)
library(matrixStats)
detach("package:matrixStats", unload = TRUE)
library(MatrixGenerics)
detach("package:MatrixGenerics", unload = TRUE)
>>>>>>> dev
